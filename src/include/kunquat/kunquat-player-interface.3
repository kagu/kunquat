.TH kunquat\-player\-interface 3 "2018\-10\-04" "" "Kunquat"

.SH NAME
Kunquat player API

.SH SYNOPSIS
.B #include <kunquat/Player.h>
.br
.B #include <kunquat/limits.h>

.BI "int kqt_Handle_play(kqt_Handle " handle ", long " nframes );
.br
.BI "int kqt_Handle_has_stopped(kqt_Handle " handle );

.BI "long kqt_Handle_get_frames_available(kqt_Handle " handle );
.br
.BI "const float* kqt_Handle_get_audio(kqt_Handle " handle ", int " index );

.BI "int kqt_Handle_set_audio_rate(kqt_handle " handle ", long " rate );
.br
.BI "long kqt_Handle_get_audio_rate(kqt_Handle " handle );

.BI "int kqt_Handle_set_audio_buffer_size(kqt_Handle " handle ", long " size );
.br
.BI "long kqt_Handle_get_audio_buffer_size(kqt_Handle " handle );

.BI "long long kqt_Handle_get_duration(kqt_Handle " handle ", int " track );

.BI "int kqt_Handle_set_position(kqt_Handle " handle ", int " track ", long long " nanoseconds );
.br
.BI "long long kqt_Handle_get_position(kqt_Handle " handle );

.BI "int kqt_Handle_fire_event(kqt_Handle " handle ", int " channel ", const char* " event );
.br
.BI "const char* kqt_Handle_receive_events(kqt_Handle " handle );

.SH "PLAYING AUDIO"

The Kunquat library does not support any sound devices or libraries directly.
However, it can render PCM audio that can be sent to a suitable sound library
for playback.

.IP "\fBlong kqt_Handle_play(kqt_Handle\fR \fIhandle\fR\fB, long\fR \fInframes\fR\fB);\fR"
Play music associated with \fIhandle\fR, starting from the current position.
The function will render at most \fInframes\fR frames of audio, but it will
render less if the audio buffer size is less than \fInframes\fR, the end of the
composition is reached, or the event buffer is full. By default, the function
renders the audio 48000 frames per second. This can be adjusted with the
function \fBkqt_Handle_set_audio_rate\fR.

If \fBkqt_Handle_play(\fR\fIhandle\fR\fB, long\fR \fInframes\fR\fB)\fR is
called after the end of the composition is reached, more audio is produced as
if the composition were paused indefinitely.

The function returns 1 if successful, or 0 if an error occurred.

.IP "\fBint kqt_Handle_has_stopped(kqt_Handle\fR \fIhandle\fR\fB);\fR"
Find out if playback has stopped in \fIhandle\fR.

The function returns 1 if playback has stopped, 0 if not, or -1 if an error
occurred.

.IP "\fBlong kqt_Handle_get_frames_available(kqt_Handle\fR \fIhandle\fR\fB);\fR"
Return the number of frames rendered after the last call of
\fBkqt_Handle_play\fR, or -1 if an error occurred. A return value of 0 does
not imply end of playback or error; a subsequent call of \fBkqt_Handle_play\fR
may produce more audio data.

.IP "\fBconst float* kqt_Handle_get_audio(kqt_Handle\fR \fIhandle\fR\fB, int\fR \fIindex\fR\fB);\fR"
Retrieve audio data rendered by the most recent call of
\fBkqt_Handle_play\fR. The returned data contains the audio buffer contents of
either the left or the right output channel if \fIindex\fR is, respectively, 0
or 1. The returned buffer contains sample values normalised to the range
[-1.0, 1.0]. However, values beyond this range are possible and they indicate
clipping. The data in the returned buffers becomes invalid when
\fBkqt_Handle_play\fR is called again. The function returns NULL if called with
invalid arguments.

.PP
Many audio interfaces expect to receive the sound data in an interleaved form
where both output channels are stored in a single output buffer in the order
[left1, right1, left2, right2, ..., left\fIn\fR, right\fIn\fR]. Also, some
audio interfaces do not support 32-bit floating point format. The Kunquat
library does not support interleaving or audio data conversions, but these
functions are usually easy to implement.

.SH "AUDIO RATE"

.IP "\fBint kqt_Handle_set_audio_rate(kqt_Handle\fR \fIhandle\fR\fB, long\fR \fIrate\fR\fB);\fR"
Set the audio rate of \fIhandle\fR to \fIrate\fR frames per second.
The \fIrate\fR argument should be positive. Typical values for \fIrate\fR
include 48000 (the default) and 44100 ("CD quality"). Note that this function
may fail due to a memory error if the composition uses features that allocate
buffers based on the audio rate.

.IP "\fBlong kqt_Handle_get_audio_rate(kqt_Handle\fR \fIhandle\fR\fB);\fR"
Return the audio rate used by \fIhandle\fR, or 0 if \fIhandle\fR is invalid.

.SH "AUDIO BUFFER SETTINGS"

.IP "\fBint kqt_Handle_set_audio_buffer_size(kqt_Handle\fR \fIhandle\fR\fB, long\fR \fIsize\fR\fB);\fR"
Set the audio buffer size of \fIhandle\fR to \fIsize\fR frames. The \fIsize\fR
argument should be positive and not greater than 1048576. The upper limit is
a safety measure; typically, implementations use a buffer size of no more than
a couple of thousand frames.

.IP "\fBlong kqt_Handle_get_audio_buffer_size(kqt_Handle\fR \fIhandle\fR\fB);\fR"
Return the audio buffer size of \fIhandle\fR, or 0 if \fIhandle\fR is invalid.

.SH "DURATION AND SEEKING"

.IP "\fBlong long kqt_Handle_get_duration(kqt_Handle\fR \fIhandle\fR\fB, int\fR \fItrack\fR\fB);\fR"
Estimate the duration of \fItrack\fR in \fIhandle\fR. If \fItrack\fR is
-1, the function estimates the total length of all tracks. The return value
is the length in nanoseconds, or KQT_CALC_DURATION_MAX if the length is
KQT_CALC_DURATION_MAX nanoseconds or longer, or -1 in case of an error.

.IP "\fBint kqt_Handle_set_position(kqt_Handle\fR \fIhandle\fR\fB, int\fR \fItrack\fR\fB, long long\fR \fInanoseconds\fR\fB);\fR"
Seek to a position inside \fItrack\fR in \fIhandle\fR. The \fInanoseconds\fR
argument indicates the offset from the beginning of the track. Note that this
function skips all non-global events before the position \fInanoseconds\fR
and therefore audio rendering may produce somewhat unexpected results. The
function returns 1 on success, 0 on failure.

.IP "\fBlong long kqt_Handle_get_position(kqt_Handle\fR \fIhandle\fR\fB);\fR"
Return the current offset of playback in nanoseconds. The function returns 0
if \fIhandle\fR is invalid.

.SH "EVENTS"

.IP "\fBint kqt_Handle_fire_event(kqt_Handle\fR \fIhandle\fR\fB, int\fR \fIchannel\fR\fB, const char*\fR \fIevent\fR\fB);\fR"
Fire an event in the composition. The event takes place in \fIchannel\fR (0
to 63 inclusive). The \fIevent\fR argument is the event description in JSON
format. The description is a pair (list with two elements) with the event name
as the first element and its argument expression as the second element. The
function returns 1 if the event was successfully fired, otherwise 0.

.IP "\fBconst char* kqt_Handle_receive_events(kqt_Handle\fR \fIhandle\fR\fB);\fR"
Return a JSON list of events fired during the last call of
\fBkqt_Handle_play\fR. The list is not necessarily exhaustive; subsequent
calls may return more events. An empty list indicates that all events have
been returned. The returned memory area becomes invalid when any
playback-related function is called for \fIhandle\fR.

The function returns NULL if \fIhandle\fR is invalid.

.SH ERRORS

If any of the functions fail, an error description can be retrieved with
\fBkqt_Handle_get_error(\fR\fIhandle\fR\fB)\fR. See
.BR kunquat-handle (3)
for more details.

.SH "SEE ALSO"

.BR kqt_Handle_get_error (3)


