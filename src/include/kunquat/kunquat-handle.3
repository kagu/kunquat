.TH kunquat\-handle 3 "2018\-10\-11" "" "Kunquat"

.SH NAME

Kunquat Handle interface

.SH SYNOPSIS

.B #include <kunquat/Handle.h>

.BI "kqt_Handle kqt_new_Handle(void);

.BI "int kqt_Handle_set_loader_thread_count(kqt_Handle " handle ", int " count );
.br
.BI "int kqt_Handle_get_loader_thread_count(kqt_Handle " handle );

.BI "int kqt_Handle_set_data(kqt_Handle " handle ", const char* " key ", const void* " data ", long " length );

.BI "int kqt_Handle_validate(kqt_Handle " handle );

.BI "const char* kqt_Handle_get_error(kqt_Handle " handle );
.br
.BI "const char* kqt_Handle_get_error_message(kqt_Handle " handle );
.br
.BI "void kqt_Handle_clear_error(kqt_Handle " handle );

.BI "void kqt_del_Handle(kqt_Handle " handle );

.SH "KUNQUAT HANDLE"

The \fBkqt_Handle\fR is an opaque data structure that represents a Kunquat
composition in memory.
A Kunquat composition file (usually
with a file extension "kqt") is a single file suitable for distribution.
Convenient access to these files is provided by libkunquatfile; see
\fBkunquat-file\fR(3).

Operations on Kunquat Handles are generally \fInot\fR thread-safe. In
particular, multiple threads must not create or destroy Kunquat Handles or
access a single Kunquat Handle in parallel. However, accessing different
Kunquat Handles from different threads in parallel should be safe.

.SH "CREATING KUNQUAT HANDLES"

.IP "\fBkqt_Handle kqt_new_Handle(void);\fR"
Create a new Kunquat Handle that contains an empty composition.
The function returns the new Kunquat Handle on success, or 0 if
an error occurred.

.SH "MULTITHREADING SUPPORT"

Certain operations on Kunquat Handles may benefit from utilising multiple
threads of execution. In addition to audio rendering, these operations may
include certain loading operations.

.IP "\fBint kqt_Handle_set_loader_thread_count(kqt_Handle\fR \fIhandle\fR\fB, int\fR \fIcount\fR\fB);\fR"
Set the number of threads used by \fIhandle\fR for loading operations to
\fIcount\fR. The default number of threads used is 1. Note that resource
allocation for threads may fail later, in which case the loading operations
will use less threads than requested. Also note that if libkunquat is built
without multithreading support, this function will succeed without changing the
thread count. This function returns 1 on success, 0 on failure.

.IP "\fBint kqt_Handle_get_loader_thread_count(kqt_Handle\fR \fIhandle\fR\fB);\fR"
Return the number of threads used by \fIhandle\fR, or 0 if \fIhandle\fR is
invalid.

.SH "DATA MODIFICATION"

Composition data can be modified through a Kunquat Handle with keys. A valid
key consists of one or more textual elements separated by forward slashes
('/'). The last element is the only one that is allowed and required to
contain a period. The format is similar, but not equivalent, to that of POSIX
directory paths. Examples:

.in +4n
.nf
p_connections.json
pat_000/col_00/p_triggers.json
au_01/p_manifest.json
.fi
.in

.IP "\fBint kqt_Handle_set_data(kqt_Handle\fR \fIhandle\fR\fB, const char*\fR \fIkey\fR\fB, const void*\fR \fIdata\fR\fB, long\fR \fIlength\fR\fB);\fR"
Set data in \fIhandle\fR associated with \fIkey\fR. The \fIlength\fR argument
specifies the number of bytes in \fIdata\fR and must not exceed the real
length of \fIdata\fR. If \fIlength\fR is 0, the data associated with \fIkey\fR
is removed. This function returns 1 on success, 0 on failure.

.IP "\fBint kqt_Handle_validate(kqt_Handle\fR \fIhandle\fR\fB);\fR"
Validate data in \fIhandle\fR. This function needs to be called after one or
more successful calls of \fBkqt_Handle_set_data\fR before \fIhandle\fR can be
fully utilised again. This function returns 1 on success, 0 on failure. If the
validation fails, \fIhandle\fR can no longer be used and should be deallocated
by calling \fBkqt_del_Handle(\fR\fIhandle\fR\fB)\fR.

.SH ERRORS

Errors in Kunquat are divided into the following categories:

.IP \fBArgumentError\fR
A Kunquat function was called with an inappropriate argument value. Usually,
this indicates an error in the calling or the library code.

.IP \fBFormatError\fR
A value to be stored was invalid.

.IP \fBMemoryError\fR
Memory allocation failed. If this happens with a function that modifies
composition data, the data may be corrupted.

.IP \fBResourceError\fR
The Kunquat library could not get service from an external resource such as
another library.

.PP
Error descriptions are JSON object strings that contain at least two keys:
"type" and "message". The value of "type" is one of the categories above and
the value of "message" is a human-readable description of the error.

.IP "\fBconst char* kqt_Handle_get_error(kqt_Handle\fR \fIhandle\fR\fB);\fR"
Return an error description of the last error occurred when accessing
\fIhandle\fR. The \fIhandle\fR argument may also be 0, in which case the
function returns an error description about the last error occurred in using
the Kunquat library in general. In particular, passing 0 as the argument is the
only way to retrieve Handle creation error descriptions. The function will
return the last error description, or an empty string if no error has occurred.

.IP "\fBconst char* kqt_Handle_get_error_message(kqt_Handle\fR \fIhandle\fR\fB);\fR"
Return the last human-readable error message from \fIhandle\fR. The message is
also part of the error description returned by \fBkqt_Handle_get_error\fR. The
function will return the last error message, or an empty string if no error has
occurred.

.IP "\fBvoid kqt_Handle_clear_error(kqt_Handle\fR \fIhandle\fR\fB);\fR"
Clear error information in \fIhandle\fR. This is useful to do before calling
a function for which the only way to detect an error is via
\fBkqt_Handle_get_error\fR. The \fIhandle\fR argument may also be 0, in which
case the generic error message is cleared. Validation errors are not cleared
from Handles as they are considered fatal errors.

.SH "FREEING RESOURCES"

.IP "\fBvoid kqt_del_Handle(kqt_Handle\fR \fIhandle\fR\fB);\fR"
Destroy \fIhandle\fR and all resources allocated for it. The function
does not return a value, and it only sets the generic error message in case
\fIhandle\fR is invalid.

.SH "SEE ALSO"

.BR kunquat-player-interface (3)


