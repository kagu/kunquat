#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# Authors: Tomi Jylhä-Ollila, Finland 2010-2018
#          Toni Ruottu, Finland 2010
#
# This file is part of Kunquat.
#
# CC0 1.0 Universal, http://creativecommons.org/publicdomain/zero/1.0/
#
# To the extent possible under law, Kunquat Affirmers have waived all
# copyright and related or neighboring rights to Kunquat.
#

import collections
import getopt
from itertools import cycle, chain
import json
import locale
import math
import multiprocessing
import os.path
import random
import string
import sys
import termios
import time

from kunquat.kunquat.file import KqtFile
from kunquat.kunquat.kunquat import Kunquat, KunquatError
from kunquat.extras import pulseaudio


PROGRAM_NAME = 'kunquat-player'
PROGRAM_VERSION = '0.9.2'
AUTHORS = [ 'Tomi Jylhä-Ollila', 'Toni Ruottu' ]

ENABLE_UNICODE_OUTPUT = (locale.getpreferredencoding().lower() == 'utf-8')


def author_list(authors):
    s = 's' if len(authors) > 1 else ''
    head = 'Author{}:'.format(s)
    space = cycle([len(head) * ' '])
    left = chain([head], space)
    right = authors
    rows = (' '.join(r) for r in zip(left, right))
    return '\n'.join(rows)


def print_licence():
    print(author_list(AUTHORS))
    print('No rights reserved')
    print('CC0 1.0 Universal, http://creativecommons.org/publicdomain/zero/1.0/')


def print_version():
    print(PROGRAM_NAME, PROGRAM_VERSION)


def print_over_status(s, status_line_length):
    parts = s.split('\n', maxsplit=1)
    first = parts[0]
    first += ' ' * max(0, status_line_length - len(first))
    parts[0] = first
    new_s = '\n'.join(parts)
    print(new_s)


def print_interactive_help(status_line_length):
    help = ['',
            'Supported keys in interactive mode:',
            '  `h`          Show this help.',
            '  Space        Pause/resume playback.',
            '  Left         Seek backwards 10 seconds.',
            '  Right        Seek forwards 10 seconds.',
            '  [0-9], `a`   Select track (`a` plays all tracks).',
            '  `p`          Select previous track.',
            '  `n`          Select next track.',
            '  Backspace    Select previous file.',
            '  Return       Select next file.',
            '  `m`          Show module message.',
            '  `q`          Quit.',
            '']
    print_over_status('\n'.join(help), status_line_length)


def print_meta(meta):
    fields = []
    values = []

    try:
        title = meta['m_title.json']
        fields.extend(['Title:'])
        values.extend([title])
    except KeyError:
        pass

    try:
        authors = meta['m_authors.json']
    except KeyError:
        authors = None
    if authors:
        s = 's' if len(authors) != 1 else ''
        fields.append('Author{}:'.format(s))
        values.append(', '.join(authors))

    if not fields:
        return
    field_width = max(len(f) for f in fields)
    fields = (f + ' ' * (field_width - len(f)) for f in fields)
    rows = (' '.join(r) for r in zip(fields, values))
    fail_count = 0
    for row in rows:
        try:
            print(row)
        except UnicodeEncodeError:
            fail_count += 1
    if fail_count > 0:
        print('(Note: Some metadata cannot be displayed'
                ' due to character encoding restrictions)')


def print_message(meta, first_line_length):
    msg = meta.get('m_message.json')
    if not msg:
        print_over_status('No message found.', first_line_length)
        return

    try:
        print_over_status('Message:\n{}'.format(msg), first_line_length)
    except UnicodeEncodeError:
        print_over_status(
                'Message cannot be displayed due to character encoding restrictions.',
                first_line_length)


def load_kqt(path, rate):
    handle = Kunquat(rate)
    handle.thread_count = get_default_thread_count()

    f = KqtFile(path)
    f.load_into_handle(handle)

    player_data = {}
    for (key, value) in f.get_stored_entries():
        stripped = value
        if key.endswith('.json'):
            if (type(value) == list) and (len(value) == 2):
                _, stripped = value
        player_data[key] = stripped

    return handle, player_data


def track_exists(keys, num):
    tl_key = 'album/p_tracks.json'
    if tl_key in keys:
        tl = keys[tl_key]
        return num < len(tl)
    return False


def play(options, file_name, pa_handle, key_handler, list_pos):
    # Get Kunquat instance
    path_head, path_tail = os.path.split(os.path.realpath(file_name))
    if os.path.isdir(file_name) and path_tail == 'kqtc00':
        print('Playing unpacked Kunquat composition directories is'
                ' no longer supported.\n'
                'You can make a Kunquat music file by running:\n'
                '  tar cj --format=ustar -f music.kqt -C',
                path_head, path_tail, end='', file=sys.stderr)
        sys.stderr.flush()
        return KeyHandler.RETURN
    try:
        handle, meta = load_kqt(file_name, options['rate'])
    except IOError as e:
        print('Couldn\'t open \'{}\': {}'.format(file_name, e), end='')
        return KeyHandler.RETURN
    except KunquatError as e:
        print('Couldn\'t load \'{}\': {}'.format(file_name, e), end='')
        return KeyHandler.RETURN

    # Prepare
    handle.thread_count = options['threads']
    handle.audio_buffer_size = options['buffer-size']
    handle.track = options['track']
    status = Status(options['rate'])
    duration = handle.get_duration(options['track'])
    if not options['quiet']:
        print('Playing', file_name)
        print_meta(meta)
    return_key = KeyHandler.RETURN
    status_len_max = 0
    #pause = False
    #handle.fire(-1, '[">pause", []]')

    # Play
    handle.play()
    bufs = handle.get_audio()
    rt_cycle_len = float(options['buffer-size']) / options['rate']
    mix_cycle_start = 0
    mix_cycle_end = 0
    mix_loads = collections.deque([0] * 8)
    while not handle.has_stopped():
        mix_loads.popleft()
        mix_loads.append((mix_cycle_end - mix_cycle_start) / rt_cycle_len)
        mix_load = (sum(mix_loads) - min(mix_loads) - max(mix_loads)) / \
                   (len(mix_loads) - 2)
        pa_handle.write(*bufs)
        if not options['quiet']:
            # Update voice count
            voice_count = 0
            handle.fire_event(0, ['qvoices', None])
            events = handle.receive_events()
            try:
                vc = next(x for x in events if x[1][0] == 'Avoices')
                voice_count = vc[1][1]
            except StopIteration:
                pass

            status_line = status.get_status_line(handle, duration, bufs, mix_load, None)
            print(status_line, end='')
            status_len = len(status_line)
            if status_len < status_len_max:
                print((' ' * (status_len_max - status_len)), end='')
            else:
                status_len_max = status_len
            print(end='\r')
            key = key_handler.get_key()
            if key:
                if key == 'q':
                    return_key = key
                    break
                elif key == KeyHandler.BACKSPACE:
                    if 'first' not in list_pos:
                        return_key = key
                        break
                elif key == KeyHandler.RETURN:
                    if 'last' not in list_pos:
                        return_key = key
                        break
                elif key == 'h':
                    print_interactive_help(status_len_max)
                elif key == ' ':
                    print('\n --- PAUSE ---', end='\r')
                    res_key = key_handler.wait_key()
                    status_len_max = 14
                    if res_key == 'q':
                        return_key = 'q'
                        break
                elif key == KeyHandler.LEFT:
                    if handle.nanoseconds < 10000000000:
                        handle.nanoseconds = 0
                    else:
                        handle.nanoseconds = handle.nanoseconds - 10000000000
                elif key == KeyHandler.RIGHT:
                    handle.nanoseconds = handle.nanoseconds + 10000000000
                elif key == 'a':
                    handle.track = None
                    duration = handle.get_duration(handle.track)
                elif key in string.digits:
                    if track_exists(meta, int(key)):
                        handle.track = int(key)
                        duration = handle.get_duration(handle.track)
                elif key == 'p':
                    if handle.track == 0:
                        handle.track = None
                        duration = handle.get_duration(handle.track)
                    elif handle.track:
                        handle.track = handle.track - 1
                        duration = handle.get_duration(handle.track)
                elif key == 'n':
                    if handle.track is None:
                        handle.track = 0
                        duration = handle.get_duration(handle.track)
                    elif track_exists(meta, handle.track + 1):
                        handle.track = handle.track + 1
                        duration = handle.get_duration(handle.track)
                elif key == 'm':
                    print_message(meta, status_len_max)
                """
                elif key == '§':
                    #handle.fire(63, '["c.i", [1]]')
                    handle.fire(63, '["cn+", [%f]]' % random.gauss(0, 1000))
                elif key == '½':
                    if not pause:
                        handle.fire(-1, '[">pause", []]')
                    else:
                        handle.fire(-1, '[">resume", []]')
                    pause = not pause
                """
        mix_cycle_start = time.time()
        handle.play()
        bufs = handle.get_audio()
        mix_cycle_end = time.time()

    pa_handle.drain()
    return return_key


def play_all(options, files):
    pa_handle = pulseaudio.Simple(PROGRAM_NAME, 'Music', options['rate'])
    key_handler = KeyHandler()
    file_index = 0
    while file_index < len(files):
        file_name = files[file_index]
        list_pos = []
        if file_index == 0:
            list_pos.append('first')
        if file_index == len(files) - 1:
            list_pos.append('last')
        try:
            if not options['quiet']:
                key_handler.disable_blocking()
            action = play(options, file_name, pa_handle, key_handler, list_pos)
        finally:
            if not options['quiet']:
                key_handler.restore()
        if not options['quiet']:
            print()
        if action == 'q':
            break
        elif action == KeyHandler.BACKSPACE:
            if file_index > 0:
                file_index = file_index - 1
        elif action == KeyHandler.RETURN:
            file_index = file_index + 1
    if not options['quiet']:
        print('Done.')


def print_help():
    print('Usage: {} [options] <files>'.format(PROGRAM_NAME))
    print('\nOptions:')
    print('  --buffer-size n   Use audio buffer size of n frames\n'
          '                    Valid range is [64,262144]')
    print('  -r, --rate n      Set audio rate to n frames/second\n'
          '                    Valid range is [2000,192000]')
    print('  -t, --track n     Play track n\n'
          '                    Valid values are'
          ' numbers in the range [0,255] and `all`')
    print('  --threads         Use n threads for audio rendering\n'
          '                    Valid range is [1,32] (default: {})'.format(
                get_default_thread_count()))
    print('  -h, --help        Show this help and exit')
    print('  -q, --quiet       Quiet and non-interactive operation\n'
          '                    (only error messages will be displayed)')
    print('  --version         Show version information and exit')
    print()
    print('In addition to command line options, kunquat-player supports\n'
          'several control keys in interactive mode. Press `h` while\n'
          'playing to get the list of supported keys.')
    print()


def option_error(msg):
    sys.exit(msg + '\nUse -h for help.')


def get_default_thread_count():
    try:
        cpus = multiprocessing.cpu_count()
    except NotImplementedError:
        cpus = 1
    if cpus <= 2:
        return max(1, cpus)
    return min(max(2, math.ceil(cpus / 2)), 32)


def main():
    long_opts = [
            'help',
            'quiet',
            'buffer-size=',
            'rate=',
            'track=',
            'threads=',
            'version',
            ]
    try:
        opts, paths = getopt.getopt(sys.argv[1:], ':hqr:t:', long_opts)
    except getopt.GetoptError as e:
        print(e.msg, e.opt)
        option_error(e)

    options = {
            'buffer-size': 2048,
            'rate': 48000,
            'track': None,
            'threads': get_default_thread_count(),
            'quiet': False
            }

    setters = {
            '--buffer-size': set_buffer_size,
            '-r': set_rate, '--rate': set_rate,
            '-t': set_track, '--track': set_track,
            '--threads': set_threads,
            '-q': set_quiet, '--quiet': set_quiet,
            }

    for option, value in opts:
        if option in ('-h', '--help'):
            print_help()
            sys.exit()
        elif option == '--version':
            print_version()
            print_licence()
            sys.exit()
        else:
            setters[option](options, value)

    if not paths:
        sys.exit('No input files specified. Use -h for help.')

    try:
        play_all(options, paths)
    except KeyboardInterrupt:
        print()


def set_buffer_size(options, value):
    try:
        num = int(value)
        if not 64 <= num <= 262144:
            raise ValueError
        options['buffer-size'] = num
    except ValueError:
        option_error('Buffer size must be an integer'
                ' between 64 and 262144')


def set_rate(options, value):
    try:
        num = int(value)
        if not 2000 <= num <= 192000:
            raise ValueError
        options['rate'] = num
    except ValueError:
        option_error('Audio rate must be an integer'
                ' between 2000 and 192000')


def set_track(options, value):
    if 'all'.startswith(value): # allow user to specify prefix
        options['track'] = None
    else:
        try:
            num = int(value)
            if not 0 <= num < 256:
                raise ValueError
            options['track'] = num
        except ValueError:
            option_error('Track must be a number between 0 and'
                    ' 255 (or all)')


def set_threads(options, value):
    try:
        num = int(value)
        if not 1 <= num <= 32:
            raise ValueError
        options['threads'] = num
    except ValueError:
        option_error('Number of threads must be between 1 and 32')


def set_quiet(options, value):
    options['quiet'] = True


class KeyHandler():

    LEFT = 256
    DOWN = 257
    UP = 258
    RIGHT = 259
    RETURN = 260
    BACKSPACE = 261

    key_map = {
        #'\033[A' : UP,
        #'\033[B' : DOWN,
        '\033[C' : RIGHT,
        '\033[D' : LEFT,
        '\x0a' : RETURN,
        '\x7f' : BACKSPACE
    }

    def __init__(self):
        self.orig_term = termios.tcgetattr(sys.stdin)
        self.nb_term = termios.tcgetattr(sys.stdin)
        self.wait_term = termios.tcgetattr(sys.stdin)
        # Set lflags.
        self.wait_term[3] = self.nb_term[3] = \
                self.nb_term[3] & ~(termios.ICANON |
                                    termios.ECHO |
                                    termios.IEXTEN)
        # Set cc.
        self.nb_term[6][termios.VMIN] = 0
        self.nb_term[6][termios.VTIME] = 0

    def disable_blocking(self):
        termios.tcsetattr(sys.stdin, termios.TCSAFLUSH, self.nb_term)

    def wait_key(self):
        termios.tcsetattr(sys.stdin, termios.TCSAFLUSH, self.wait_term)
        key = sys.stdin.read(1)
        self.disable_blocking()
        return key

    def get_key(self):
        key = sys.stdin.read(3)
        if not key:
            return None
        if key in KeyHandler.key_map:
            return KeyHandler.key_map[key]
        return key

    def restore(self):
        termios.tcsetattr(sys.stdin, termios.TCSAFLUSH, self.orig_term)

    def __del__(self):
        self.restore()


class Status():

    clip_map = {
        (True, True)   : '■',
        (True, False)  : '⬒',
        (False, True)  : '⬓',
        (False, False) : '□'
    }

    block_map = {
        (3, 3) : '⣿',
        (3, 2) : '⢻',
        (3, 1) : '⡟',
        (3, 0) : '⠛',
        (2, 3) : '⣼',
        (2, 2) : '⢸',
        (2, 1) : '⡜',
        (2, 0) : '⠘',
        (1, 3) : '⣧',
        (1, 2) : '⢣',
        (1, 1) : '⡇',
        (1, 0) : '⠃',
        (0, 3) : '⣤',
        (0, 2) : '⢠',
        (0, 1) : '⡄',
        (0, 0) : ' '
    }

    SILENCE = -384

    def __init__(self, rate):
        self.left_clipped = False
        self.right_clipped = False
        self.rate = rate
        self.hold_limit = rate * 1.0
        self.left_hold = [Status.SILENCE, self.hold_limit]
        self.right_hold = [Status.SILENCE, self.hold_limit]

    def dur_to_str(self, duration):
        tenths = int(duration / 100000000)
        seconds = tenths // 10
        return '{:02d}:{:02d}.{:01d}'.format(seconds // 60, seconds % 60, tenths % 10)

    def get_status_line(self, handle, duration, bufs, mix_load, voice_count):
        components = []
        if handle.track is None:
            components.append('All tracks')
        else:
            components.append('Track: {}'.format(handle.track))
        elapsed = 'Time: {}'.format(self.dur_to_str(handle.nanoseconds))
        if handle.nanoseconds <= duration:
            if duration == 2592000000000000:
                elapsed += ' of >= 30 days'
            else:
                elapsed += ' [{}] of {}'.format(
                           self.dur_to_str(duration - handle.nanoseconds),
                           self.dur_to_str(duration))
        components.append(elapsed)
        if mix_load > 0:
            components.append('Load: {:.0f} %'.format(mix_load * 100))
        if voice_count != None:
            components.append('Voices: {:d}'.format(voice_count))

        text_info = ', '.join(components)
        if ENABLE_UNICODE_OUTPUT:
            return self.get_peak_meter(14, -40, 0, bufs) + text_info
        return text_info

    def get_peak_meter(self, length, lower, upper, bufs):
        if lower < Status.SILENCE:
            lower = Status.SILENCE
        left_vol_linear = max(bufs[0]) - min(bufs[0]) / 2
        right_vol_linear = max(bufs[1]) - min(bufs[1]) / 2
        self.left_clipped = (self.left_clipped or
                             sum(1 for a in bufs[0] if abs(a) > 1.0) > 0)
        self.right_clipped = (self.right_clipped or
                              sum(1 for a in bufs[1] if abs(a) > 1.0) > 0)
        left_bar = self.get_single_meter(length - 3, lower, upper,
                                         left_vol_linear, self.left_hold)
        right_bar = self.get_single_meter(length - 3, lower, upper,
                                          right_vol_linear, self.right_hold)
        self.left_hold[1] += len(bufs[0])
        self.right_hold[1] += len(bufs[0])
        return '{}{}  '.format(self.combine_meters(left_bar, right_bar),
                Status.clip_map[(self.left_clipped, self.right_clipped)])

    def get_single_meter(self, length, lower, upper, vol_linear, hold):
        if vol_linear <= 0:
            vol = Status.SILENCE
        else:
            vol = math.log(vol_linear, 2) * 6
        scale = length * 2
        scale_dB = upper - lower
        fill_length = int((vol - lower) * scale / scale_dB)
        if fill_length < 0:
            fill_length = 0
        elif fill_length > scale:
            fill_length = scale
        bar = [1] * fill_length + [0] * (scale - fill_length) + [1, 0]
        bar[0] = 1
        if hold[1] >= self.hold_limit or hold[0] <= vol:
            hold[0] = vol
            hold[1] = 0
            hold_pos = fill_length - 1
        else:
            hold_pos = int((hold[0] - lower) * scale / scale_dB) - 1
        if hold_pos >= 0:
            if hold_pos >= scale:
                hold_pos = scale - 1
            bar[hold_pos] = 1
        return (a + 2 * b for a, b in zip(bar[0::2], bar[1::2]))

    def combine_meters(self, left_bar, right_bar):
        bar = zip(left_bar, right_bar)
        return ''.join(Status.block_map[pair] for pair in bar)


if __name__ == '__main__':
    main()


