#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# Author: Tomi Jylhä-Ollila, Finland 2012-2019
#
# This file is part of Kunquat.
#
# CC0 1.0 Universal, http://creativecommons.org/publicdomain/zero/1.0/
#
# To the extent possible under law, Kunquat Affirmers have waived all
# copyright and related or neighboring rights to Kunquat.
#

import getopt
import itertools as it
import json
import locale
import math
import multiprocessing
import os.path
import sys
import time

from kunquat.kunquat.file import KqtFile
from kunquat.kunquat.kunquat import Kunquat, KunquatError
import kunquat.extras.sndfile as sndfile


PROGRAM_NAME = 'kunquat-export'
PROGRAM_VERSION = '0.9.3'
AUTHORS = [ 'Tomi Jylhä-Ollila' ]

ENABLE_UNICODE_OUTPUT = (locale.getpreferredencoding().lower() == 'utf-8')


def get_default_thread_count():
    try:
        cpus = multiprocessing.cpu_count()
    except NotImplementedError:
        cpus = 1
    if cpus <= 2:
        return max(1, cpus)
    return min(max(2, math.ceil(cpus / 2)), 32)


def load_kqt(path, audio_rate, quiet):
    handle = Kunquat(audio_rate)
    handle.set_loader_thread_count(get_default_thread_count())

    f = KqtFile(handle)
    if quiet:
        f.load(path)
    else:
        max_length = 0
        for _ in f.load_steps(path):
            progress = f.get_loading_progress()
            loading_str = 'Loading {} ({:.0f}%)...'.format(path, progress * 100)
            max_length = max(max_length, len(loading_str))
            print(loading_str, end='\r')

    handle.validate()

    if not quiet:
        print(' ' * max_length, end='\r')

    player_data = {}
    for (key, value) in f.get_kept_entries():
        stripped = value
        if key.endswith('.json'):
            if (type(value) == list) and (len(value) == 2):
                _, stripped = value
        player_data[key] = stripped

    del f

    return handle, player_data


def export(in_path, out_path, options):
    try:
        handle, _ = load_kqt(in_path, options['rate'], options['quiet'])
    except IOError as e:
        print('Couldn\'t open \'{}\': {}'.format(in_path, e))
        return
    except KunquatError as e:
        print('Couldn\'t load \'{}\': {}'.format(in_path, e))
        return
    handle.set_player_thread_count(options['threads'])
    handle.track = options['track']
    duration = handle.get_duration(options['track'])

    if not options['quiet']:
        print('Exporting {} to {}'.format(in_path, out_path))

    try:
        sf = sndfile.SndFileW(
                out_path,
                format=options['format'],
                rate=options['rate'],
                channels=2,
                use_float=options['float'],
                bits=options['bits'])
    except ValueError as e:
        print(e)
        sys.exit(1)
    except sndfile.SndFileError as e:
        print(e)
        return

    peak = 0
    clipped = 0
    line_len = 0

    start_time = time.time()
    handle.play()
    buf = handle.get_audio()
    while not handle.has_stopped():
        sf.write(buf)

        if not options['quiet']:
            lslice = it.islice(buf, 0, None, 2)
            rslice = it.islice(buf, 1, None, 2)
            clipped += sum(1 for (x, y) in zip(lslice, rslice)
                    if abs(x) > 1.0 or abs(y) > 1.0)

            cur_peak = max(abs(x) for x in buf)
            peak = max(peak, cur_peak)
            clen = print_status_line(handle.nanoseconds, duration, clipped)
            line_len = max(line_len, clen)

        handle.play()
        buf = handle.get_audio()

    end_time = time.time()

    if not options['quiet']:
        elapsed = end_time - start_time
        print(' ' * line_len, end='\r')
        print_summary(duration / 1000000000, elapsed, peak, clipped)

    sf = None


def export_all(options, paths):
    for path in paths:
        path_head, path_tail = os.path.split(os.path.realpath(path))
        if os.path.isdir(path) and path_tail == 'kqtc00':
            print('Exporting unpacked Kunquat composition directories is'
                    ' no longer supported.\n'
                    'You can make a Kunquat music file by running:\n'
                    '  tar cj --format=ustar -f music.kqt -C',
                    path_head, path_tail, file=sys.stderr)
            continue
        if 'output' in options:
            out_path = options['output']
        else:
            out_path = create_output_path(path, options['format'])
        export(path, out_path, options)


def print_status_line(pos, duration, clipped):
    completed = pos / duration
    line = ''
    if ENABLE_UNICODE_OUTPUT:
        line = progress_str(completed, 30) + ' '
    line += '{:4.1f} %'.format(100 * completed)
    if clipped:
        line += ', clipped: {}'.format(clipped)
    print(line, end='\r')
    sys.stdout.flush()
    return len(line)


def print_summary(duration, elapsed, peak, clipped):
    print()
    print('    Audio time:     {:02d}:{:04.1f}'.format(
                               int(duration // 60), duration % 60))
    print('    Render time:    {:02d}:{:04.1f}'.format(
                               int(elapsed // 60), elapsed % 60))
    print('    Rate:           {:.2f}'.format(duration / elapsed))
    try:
        peak_dB = '{:+.2f}'.format(math.log(peak, 2) * 6)
    except ValueError:
        peak_dB = '-inf'
    print('    Peak amplitude: {} dBFS'.format(peak_dB))
    if clipped:
        print('    Clipped:        {} frames'.format(clipped))
    print()


def progress_str(progress, area_width):
    assert progress >= 0
    assert area_width > 2
    assert area_width % 2 == 0
    area_width -= 2
    bar_width = int(round(progress * area_width))

    trailing_space = area_width - bar_width

    bar      = it.repeat(1, bar_width)
    trailing = it.repeat(0, trailing_space)
    nums     = [1] + list(it.chain(bar, trailing)) + [1]

    compressed = (a + 2 * b for (a, b) in
            zip(it.islice(nums, 0, None, 2), it.islice(nums, 1, None, 2)))
    block_map = ['⣉', '⣏', '⣹', '⣿']
    return ''.join([block_map[x] for x in compressed])


def author_list(authors):
    s = 's' if len(authors) > 1 else ''
    head = 'Author{}:'.format(s)
    space = it.cycle([len(head) * ' '])
    left = it.chain([head], space)
    right = authors
    rows = (' '.join(r) for r in zip(left, right))
    return '\n'.join(rows)


def print_licence():
    lic1 = 'No rights reserved'
    lic2 = 'CC0 1.0 Universal, http://creativecommons.org/publicdomain/zero/1.0/'
    print('\n'.join((author_list(AUTHORS), lic1, lic2)))


def print_version():
    print(PROGRAM_NAME, PROGRAM_VERSION)


def print_help():
    print('Usage: {} [options] <files>'.format(PROGRAM_NAME))
    print('\nOptions:')
    print('  -o, --output out    Use output file out')
    print('  -f, --format fmt    Use output file format fmt\n'
          '                      Supported formats: wav, au, flac')
    print('  -b, --bits b        Use b-bit fixed-point format')
    print('  --float             Use floating point format')
    print('  -r, --rate n        Set audio rate to n frames/second\n'
          '                      Valid range is [1000,384000]')
    print('  -t, --track n       Export track n\n'
          '                      Valid range is [0,255] (or `all`)')
    print('  --threads n         Use n threads for audio rendering\n'
          '                      Valid range is [1,32] (default 1)')
    print('  -h, --help          Show this help and exit')
    print('  -q, --quiet         '
            'Quiet operation (only error messages will be displayed)')
    print('  --version           Show version information and exit')
    print()


def option_error(msg):
    sys.exit(msg + '\nUse -h for help.')


def main():
    long_opts = [
            'help',
            'quiet',
            'output=',
            'track=',
            'format=',
            'bits=',
            'float',
            'rate=',
            'threads=',
            'version',
            ]
    try:
        opts, paths = getopt.getopt(sys.argv[1:], ':hqo:r:t:f:b:', long_opts)
    except getopt.GetoptError as e:
        print(e.msg, e.opt)
        option_error(e)

    options = {
            'bits': 16,
            'float': False,
            'rate': 48000,
            'track': None,
            'quiet': False,
            'threads': 1,
            }

    setters = {
            '-o': set_output, '--output': set_output,
            '-f': set_format, '--format': set_format,
            '-b': set_bits, '--bits': set_bits,
            '--float': set_float,
            '-r': set_rate, '--rate': set_rate,
            '-t': set_track, '--track': set_track,
            '--threads': set_threads,
            '-q': set_quiet, '--quiet': set_quiet,
            }

    for option, value in opts:
        if option in ('-h', '--help'):
            print_help()
            sys.exit()
        elif option == '--version':
            print_version()
            print_licence()
            sys.exit()
        else:
            setters[option](options, value)

    if not paths:
        sys.exit('No input files specified. Use -h for help.')
    elif 'output' in options and len(paths) > 1:
        sys.exit('Output file can only be specified with one input file.')

    fill_options(options)

    try:
        export_all(options, paths)
    except KeyboardInterrupt:
        print()


def create_output_path(path, format_option):
    path = os.path.basename(path)
    if path.endswith('.kqt'):
        ext_index = path.rfind('kqt')
        assert ext_index != -1
        return path[:ext_index] + format_option
    return path + '.' + format_option


def fill_options(options):
    if 'format' not in options:
        if ('output' in options and
                options['output'].endswith(('.wav', '.au', '.flac'))):
            out = options['output']
            options['format'] = out[out.rindex('.') + 1:]
        else:
            options['format'] = 'wav'
    assert options['format'] in ('wav', 'au', 'flac')

    if options['float']:
        options['bits'] = 32
    elif 'bits' not in options:
        options['bits'] = 16


def set_output(options, value):
    options['output'] = value


def set_format(options, value):
    if value not in ('wav', 'au', 'flac'):
        option_error('Unsupported format: {}'.format(value))
    options['format'] = value


def set_bits(options, value):
    try:
        num = int(value)
        if num not in (8, 16, 24, 32):
            raise ValueError
        options['bits'] = num
    except ValueError:
        option_error('Bit depth must be 8, 16, 24 or 32')


def set_float(options, value):
    options['float'] = True


def set_rate(options, value):
    try:
        num = int(value)
        if not 1000 <= num <= 384000:
            raise ValueError
        options['rate'] = num
    except ValueError:
        option_error('Audio rate must be an integer'
                ' between 1000 and 384000')


def set_track(options, value):
    if 'all'.startswith(value): # allow user to specify prefix
        options['track'] = None
    else:
        try:
            num = int(value)
            if not 0 <= num < 256:
                raise ValueError
            options['track'] = num
        except ValueError:
            option_error('Track must be a number between 0 and'
                    ' 255 (or all)')


def set_threads(options, value):
    try:
        num = int(value)
        if not 1 <= num <= 32:
            raise ValueError
        options['threads'] = num
    except ValueError:
        option_error('Number of threads must be between 1 and 32')


def set_quiet(options, value):
    options['quiet'] = True


if __name__ == '__main__':
    main()


